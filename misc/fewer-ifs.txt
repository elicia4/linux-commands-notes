Notes on the video by Luke Smith: https://youtu.be/p0KKBmfiVl0
Never say "If" writing a Bash script! (Exit codes & logical operators)

#== && ==#
Runs the second command only if the first command succeeded.

This will run only the first command:
	cat .file-that-doesnt-exist && echo "this won't run"
This will run both commands (if you have the '.bashrc' file of course):
	cat .bashrc && echo "both commands ran successfully"

#== || ==#
Runs the seconds command only if the first command DIDN'T succeed.

This will run both commands (first fails, will run the second after):
	cat .file-that-doesnt-exist || echo "first failed, second command ran"
This will run the first command only:
	cat .bashrc || echo "this won't run"

#== ;  ==#
semicolon means: run a command, semicolon, run a command.
	echo "Hello there." ; echo "General Kenobi!"
semicolon is basically the same thing as having a new line.

#== &  ==#
starts both commands at the same time.

##############################################################################
example
##############################################################################
let's say you have the following script:
		#!/bin/sh
		if [ "$EDITOR" = "" ]; then
			EDITOR=nano
		fi
		echo $EDITOR
you can use '-z' with strings (checks whether a variable contains
nothing).
you can use && to get rid of the if statement (since the editor is unset, the 
command succeeds, therefore run the second command).
		#!/bin/sh
		[ -z "$EDITOR" ] && EDITOR=nano
##############################################################################
another example
##############################################################################
let's say you have a series of functions you want to run sequentially, and run
some command if one of them fails:
	c1 && c2 && c3 && c4 || cfail
if all four commands run successfully, cfail won't run.
if ANY one of the four commands fails, cfail will run.

### an interesting note ###
"I think the use of logical operators  instead of "if" statements makes sense 
when working in a terminal. In a bash script I want others (and future me) to
understand the code on first glance, an if statement inherently does this
because it is the de facto way of controlling flow in most languages." - a
comment by Remi NiÃ«l
